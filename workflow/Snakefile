import os, glob, sys
import subprocess as sp
from itertools import groupby

configfile: "../config/config.json"

# Get custom parameters
input_fasta = config.get("input_fasta")  # path
step_size = config.get("step_size")  # int
chunks = config.get("chunks")  # True or None
chunk_size = config.get("chunk_size")  # int or None
strand = config.get("strand")  # 'both', '+' or '-'
batch_size = config.get('batch_size')
#print(step_size, chunks, chunk_size, input_fasta)
ext = config.get("output_type")

include: "rules/common.smk"
include: "rules/download.smk"

if not config.get("download_model"):
    if chunks == True:
        CHR_ = get_chr_names(input_fasta, chunks, chunk_size)
    else:
        CHR_dict = get_chr_names(input_fasta, chunks, chunk_size)
        CHR_ = list(CHR_dict.keys())
        config['CHR_dict'] = CHR_dict
    #CHR_ = [i for i in CHR_ if (i[0:2] == 'TEST') | (i[0:3] == '25_c')]
    CHR_ = ['25_chunk_0', '25_chunk_1', 'W_chunk_0', 'W_chunk_1', 'W_chunk_2', 
            'W_chunk_3', '31']
    
    config['CHR_'] = CHR_
    rule all:
        """ Run SnoBIRD to predict C/D box snoRNA genes in a genomic sequence."""
        input:
            #windows = expand("results/predictions/first_model/positive_windows_{chr_}.tsv", chr_=CHR_),
            #filtered_preds = 'results/intermediate/predictions/first_model/filtered_positive_windows.bed',
            final_output = expand('results/final/snoBIRD_complete_predictions.{output_type}', output_type=ext)
            #split_chr_dir = "data/references/genome_fa/"
        # Specify which output will be created depending on the user-defined params

rule all_downloads:
    """ Download all models that constitute SnoBIRD."""
    input:
        model1 = "data/references/models/snoBIRD_first_model.pt",
        model2 = "data/references/models/snoBIRD_second_model.pt",
        tokenizer = "data/references/DNA_BERT_6_tokenizer/",
        dnabert = "data/references/DNA_BERT_6_pretrained_model/"



include: "rules/snoBIRD.smk"
#include: "rules/target_prediction.smk"

# Define which rule to run depending if only SnoBIRD's first model 
# is run or if both models are run 
if config.get("first_model_only") == True:
    ruleorder: find_sno_limits_shap_minimal > filter_sno_pseudo_predictions_with_features
else:
    ruleorder: filter_sno_pseudo_predictions_with_features > find_sno_limits_shap_minimal
